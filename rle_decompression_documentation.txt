Initially a sequence of strings like: count*bit etc... is asked as input, so we will have a situation like this example:
input: 3*0, 5*1, 1*0 -> 000111110 this should be the output.

Next 3 lists are initialized:
	- counter
	- result 
	- support
some lists already speak for themselves given their names, however counter is for containing the number of occurrences of each bit, result is for containing the result instead support is for containing
the position where the * is in each sequence element. And then a counter is initialized starting at 0. 

Now two for loops are made all iterating for the length of sequence, basically these double loops make sure to extract the number of occurrences of each bit add it to the counter list and likewise add the position where the asterisk is in the elements.
The way the number of occurrences is extracted is by iterating count until every single character is different from * as soon as it is no longer different the nested loop stops and to the counter list there goes the value that goes from 0 to count converted to integer.
Now that we have all the numbers of occurrences all we have to do is iterate for the number of occurrences and inside the loop put another loop that iterates that the i-th counter value inside which I will add to the list the bit that will be at the i-th position + 1
of the support vector in such a way I can find the bit that repeats counter[i] times.
Finally I send to screen result all attached.